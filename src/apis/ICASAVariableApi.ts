// tslint:disable
/**
 * Model Catalog
 * This is MINT Model Catalog You can find out more about Model Catalog at [https://w3id.org/mint/modelCatalog/](https://w3id.org/mint/modelCatalog/)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ICASAVariable,
    ICASAVariableFromJSON,
    ICASAVariableToJSON,
} from '../models';

export interface IcasavariablesGetRequest {
    username?: string;
    label?: string;
}

export interface IcasavariablesIdDeleteRequest {
    id: string;
    user: string;
}

export interface IcasavariablesIdGetRequest {
    id: string;
    username?: string;
}

export interface IcasavariablesIdPutRequest {
    id: string;
    user: string;
    iCASAVariable?: ICASAVariable;
}

export interface IcasavariablesPostRequest {
    user: string;
    iCASAVariable?: ICASAVariable;
}

/**
 * no description
 */
export class ICASAVariableApi extends runtime.BaseAPI {

    /**
     * Gets a list of all ICASAVariable entities
     * List all ICASAVariable entities
     */
    async icasavariablesGetRaw(requestParameters: IcasavariablesGetRequest): Promise<runtime.ApiResponse<Array<ICASAVariable>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.label !== undefined) {
            queryParameters['label'] = requestParameters.label;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/icasavariables`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ICASAVariableFromJSON));
    }

   /**
    * Gets a list of all ICASAVariable entities
    * List all ICASAVariable entities
    */
    async icasavariablesGet(requestParameters: IcasavariablesGetRequest): Promise<Array<ICASAVariable>> {
        const response = await this.icasavariablesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing ICASAVariable
     * Delete a ICASAVariable
     */
    async icasavariablesIdDeleteRaw(requestParameters: IcasavariablesIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling icasavariablesIdDelete.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling icasavariablesIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/icasavariables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

   /**
    * Delete an existing ICASAVariable
    * Delete a ICASAVariable
    */
    async icasavariablesIdDelete(requestParameters: IcasavariablesIdDeleteRequest): Promise<void> {
        await this.icasavariablesIdDeleteRaw(requestParameters);
    }

    /**
     * Gets the details of a single instance of a ICASAVariable
     * Get a ICASAVariable
     */
    async icasavariablesIdGetRaw(requestParameters: IcasavariablesIdGetRequest): Promise<runtime.ApiResponse<ICASAVariable>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling icasavariablesIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/icasavariables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ICASAVariableFromJSON(jsonValue));
    }

   /**
    * Gets the details of a single instance of a ICASAVariable
    * Get a ICASAVariable
    */
    async icasavariablesIdGet(requestParameters: IcasavariablesIdGetRequest): Promise<ICASAVariable> {
        const response = await this.icasavariablesIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates an existing ICASAVariable
     * Update a ICASAVariable
     */
    async icasavariablesIdPutRaw(requestParameters: IcasavariablesIdPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling icasavariablesIdPut.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling icasavariablesIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/icasavariables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ICASAVariableToJSON(requestParameters.iCASAVariable),
        });

        return new runtime.VoidApiResponse(response);
    }

   /**
    * Updates an existing ICASAVariable
    * Update a ICASAVariable
    */
    async icasavariablesIdPut(requestParameters: IcasavariablesIdPutRequest): Promise<void> {
        await this.icasavariablesIdPutRaw(requestParameters);
    }

    /**
     * Create a new instance of a ICASAVariable
     * Create a ICASAVariable
     */
    async icasavariablesPostRaw(requestParameters: IcasavariablesPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling icasavariablesPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/icasavariables`.replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ICASAVariableToJSON(requestParameters.iCASAVariable),
        });

        return new runtime.VoidApiResponse(response);
    }

   /**
    * Create a new instance of a ICASAVariable
    * Create a ICASAVariable
    */
    async icasavariablesPost(requestParameters: IcasavariablesPostRequest): Promise<void> {
        await this.icasavariablesPostRaw(requestParameters);
    }

}
