// tslint:disable
/**
 * Model Catalog
 * This is the API of the Software Description Ontology at [https://w3id.org/okn/o/sdm](https://w3id.org/okn/o/sdm)
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SourceCode,
    SourceCodeFromJSON,
    SourceCodeToJSON,
} from '../models';

export interface SourcecodesGetRequest {
    username?: string;
    label?: string;
    page?: number;
    perPage?: number;
}

export interface SourcecodesIdDeleteRequest {
    id: string;
    user: string;
}

export interface SourcecodesIdGetRequest {
    id: string;
    username?: string;
}

export interface SourcecodesIdPutRequest {
    id: string;
    user: string;
    sourceCode?: SourceCode;
}

export interface SourcecodesPostRequest {
    user: string;
    sourceCode?: SourceCode;
}

/**
 * no description
 */
export class SourceCodeApi extends runtime.BaseAPI {

    /**
     * Gets a list of all instances of SourceCode (more information in https://w3id.org/okn/o/sd#SourceCode)
     * List all instances of SourceCode
     */
    async sourcecodesGetRaw(requestParameters: SourcecodesGetRequest): Promise<runtime.ApiResponse<Array<SourceCode>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.label !== undefined) {
            queryParameters['label'] = requestParameters.label;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sourcecodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SourceCodeFromJSON));
    }

   /**
    * Gets a list of all instances of SourceCode (more information in https://w3id.org/okn/o/sd#SourceCode)
    * List all instances of SourceCode
    */
    async sourcecodesGet(requestParameters: SourcecodesGetRequest): Promise<Array<SourceCode>> {
        const response = await this.sourcecodesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing SourceCode (more information in https://w3id.org/okn/o/sd#SourceCode)
     * Delete an existing SourceCode
     */
    async sourcecodesIdDeleteRaw(requestParameters: SourcecodesIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sourcecodesIdDelete.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling sourcecodesIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/sourcecodes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

   /**
    * Delete an existing SourceCode (more information in https://w3id.org/okn/o/sd#SourceCode)
    * Delete an existing SourceCode
    */
    async sourcecodesIdDelete(requestParameters: SourcecodesIdDeleteRequest): Promise<void> {
        await this.sourcecodesIdDeleteRaw(requestParameters);
    }

    /**
     * Gets the details of a given SourceCode (more information in https://w3id.org/okn/o/sd#SourceCode)
     * Get a single SourceCode by its id
     */
    async sourcecodesIdGetRaw(requestParameters: SourcecodesIdGetRequest): Promise<runtime.ApiResponse<SourceCode>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sourcecodesIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sourcecodes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceCodeFromJSON(jsonValue));
    }

   /**
    * Gets the details of a given SourceCode (more information in https://w3id.org/okn/o/sd#SourceCode)
    * Get a single SourceCode by its id
    */
    async sourcecodesIdGet(requestParameters: SourcecodesIdGetRequest): Promise<SourceCode> {
        const response = await this.sourcecodesIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates an existing SourceCode (more information in https://w3id.org/okn/o/sd#SourceCode)
     * Update an existing SourceCode
     */
    async sourcecodesIdPutRaw(requestParameters: SourcecodesIdPutRequest): Promise<runtime.ApiResponse<SourceCode>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sourcecodesIdPut.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling sourcecodesIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/sourcecodes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SourceCodeToJSON(requestParameters.sourceCode),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceCodeFromJSON(jsonValue));
    }

   /**
    * Updates an existing SourceCode (more information in https://w3id.org/okn/o/sd#SourceCode)
    * Update an existing SourceCode
    */
    async sourcecodesIdPut(requestParameters: SourcecodesIdPutRequest): Promise<SourceCode> {
        const response = await this.sourcecodesIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new instance of SourceCode (more information in https://w3id.org/okn/o/sd#SourceCode)
     * Create one SourceCode
     */
    async sourcecodesPostRaw(requestParameters: SourcecodesPostRequest): Promise<runtime.ApiResponse<SourceCode>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling sourcecodesPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/sourcecodes`.replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceCodeToJSON(requestParameters.sourceCode),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceCodeFromJSON(jsonValue));
    }

   /**
    * Create a new instance of SourceCode (more information in https://w3id.org/okn/o/sd#SourceCode)
    * Create one SourceCode
    */
    async sourcecodesPost(requestParameters: SourcecodesPostRequest): Promise<SourceCode> {
        const response = await this.sourcecodesPostRaw(requestParameters);
        return await response.value();
    }

}
