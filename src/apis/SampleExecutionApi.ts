// tslint:disable
/**
 * Model Catalog
 * This is the API of the Software Description Ontology at [https://w3id.org/okn/o/sdm](https://w3id.org/okn/o/sdm)
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SampleExecution,
    SampleExecutionFromJSON,
    SampleExecutionToJSON,
} from '../models';

export interface SampleexecutionsGetRequest {
    username?: string;
    label?: string;
    page?: number;
    perPage?: number;
}

export interface SampleexecutionsIdDeleteRequest {
    id: string;
    user: string;
}

export interface SampleexecutionsIdGetRequest {
    id: string;
    username?: string;
}

export interface SampleexecutionsIdPutRequest {
    id: string;
    user: string;
    sampleExecution?: SampleExecution;
}

export interface SampleexecutionsPostRequest {
    user: string;
    sampleExecution?: SampleExecution;
}

/**
 * no description
 */
export class SampleExecutionApi extends runtime.BaseAPI {

    /**
     * Gets a list of all instances of SampleExecution (more information in https://w3id.org/okn/o/sd#SampleExecution)
     * List all instances of SampleExecution
     */
    async sampleexecutionsGetRaw(requestParameters: SampleexecutionsGetRequest): Promise<runtime.ApiResponse<Array<SampleExecution>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.label !== undefined) {
            queryParameters['label'] = requestParameters.label;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sampleexecutions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SampleExecutionFromJSON));
    }

   /**
    * Gets a list of all instances of SampleExecution (more information in https://w3id.org/okn/o/sd#SampleExecution)
    * List all instances of SampleExecution
    */
    async sampleexecutionsGet(requestParameters: SampleexecutionsGetRequest): Promise<Array<SampleExecution>> {
        const response = await this.sampleexecutionsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing SampleExecution (more information in https://w3id.org/okn/o/sd#SampleExecution)
     * Delete an existing SampleExecution
     */
    async sampleexecutionsIdDeleteRaw(requestParameters: SampleexecutionsIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sampleexecutionsIdDelete.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling sampleexecutionsIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/sampleexecutions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

   /**
    * Delete an existing SampleExecution (more information in https://w3id.org/okn/o/sd#SampleExecution)
    * Delete an existing SampleExecution
    */
    async sampleexecutionsIdDelete(requestParameters: SampleexecutionsIdDeleteRequest): Promise<void> {
        await this.sampleexecutionsIdDeleteRaw(requestParameters);
    }

    /**
     * Gets the details of a given SampleExecution (more information in https://w3id.org/okn/o/sd#SampleExecution)
     * Get a single SampleExecution by its id
     */
    async sampleexecutionsIdGetRaw(requestParameters: SampleexecutionsIdGetRequest): Promise<runtime.ApiResponse<SampleExecution>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sampleexecutionsIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sampleexecutions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SampleExecutionFromJSON(jsonValue));
    }

   /**
    * Gets the details of a given SampleExecution (more information in https://w3id.org/okn/o/sd#SampleExecution)
    * Get a single SampleExecution by its id
    */
    async sampleexecutionsIdGet(requestParameters: SampleexecutionsIdGetRequest): Promise<SampleExecution> {
        const response = await this.sampleexecutionsIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates an existing SampleExecution (more information in https://w3id.org/okn/o/sd#SampleExecution)
     * Update an existing SampleExecution
     */
    async sampleexecutionsIdPutRaw(requestParameters: SampleexecutionsIdPutRequest): Promise<runtime.ApiResponse<SampleExecution>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sampleexecutionsIdPut.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling sampleexecutionsIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/sampleexecutions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SampleExecutionToJSON(requestParameters.sampleExecution),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SampleExecutionFromJSON(jsonValue));
    }

   /**
    * Updates an existing SampleExecution (more information in https://w3id.org/okn/o/sd#SampleExecution)
    * Update an existing SampleExecution
    */
    async sampleexecutionsIdPut(requestParameters: SampleexecutionsIdPutRequest): Promise<SampleExecution> {
        const response = await this.sampleexecutionsIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new instance of SampleExecution (more information in https://w3id.org/okn/o/sd#SampleExecution)
     * Create one SampleExecution
     */
    async sampleexecutionsPostRaw(requestParameters: SampleexecutionsPostRequest): Promise<runtime.ApiResponse<SampleExecution>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling sampleexecutionsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/sampleexecutions`.replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SampleExecutionToJSON(requestParameters.sampleExecution),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SampleExecutionFromJSON(jsonValue));
    }

   /**
    * Create a new instance of SampleExecution (more information in https://w3id.org/okn/o/sd#SampleExecution)
    * Create one SampleExecution
    */
    async sampleexecutionsPost(requestParameters: SampleexecutionsPostRequest): Promise<SampleExecution> {
        const response = await this.sampleexecutionsPostRaw(requestParameters);
        return await response.value();
    }

}
