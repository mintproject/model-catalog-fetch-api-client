// tslint:disable
/**
 * Model Catalog
 * This is the API of the  Software Description Ontology at [https://w3id.org/okn/o/sdm](https://w3id.org/okn/o/sdm)
 *
 * The version of the OpenAPI document: v1.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ConfigurationSetup,
    ConfigurationSetupFromJSON,
    ConfigurationSetupToJSON,
    ModelConfigurationSetup,
    ModelConfigurationSetupFromJSON,
    ModelConfigurationSetupToJSON,
} from '../models';

export interface ConfigurationsetupsGetRequest {
    username?: string;
    label?: string;
}

export interface ConfigurationsetupsIdDeleteRequest {
    id: string;
    user: string;
}

export interface ConfigurationsetupsIdGetRequest {
    id: string;
    username?: string;
}

export interface ConfigurationsetupsIdPutRequest {
    id: string;
    user: string;
    configurationSetup?: ConfigurationSetup;
}

export interface ConfigurationsetupsPostRequest {
    user: string;
    configurationSetup?: ConfigurationSetup;
}

export interface CustomConfigurationsetupsIdGetRequest {
    id: string;
    username?: string;
    customQueryName?: string;
}

/**
 * no description
 */
export class ConfigurationSetupApi extends runtime.BaseAPI {

    /**
     * Gets a list of all ConfigurationSetup entities
     * List all ConfigurationSetup entities
     */
    async configurationsetupsGetRaw(requestParameters: ConfigurationsetupsGetRequest): Promise<runtime.ApiResponse<Array<ConfigurationSetup>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.label !== undefined) {
            queryParameters['label'] = requestParameters.label;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/configurationsetups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConfigurationSetupFromJSON));
    }

   /**
    * Gets a list of all ConfigurationSetup entities
    * List all ConfigurationSetup entities
    */
    async configurationsetupsGet(requestParameters: ConfigurationsetupsGetRequest): Promise<Array<ConfigurationSetup>> {
        const response = await this.configurationsetupsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing ConfigurationSetup
     * Delete a ConfigurationSetup
     */
    async configurationsetupsIdDeleteRaw(requestParameters: ConfigurationsetupsIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling configurationsetupsIdDelete.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling configurationsetupsIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/configurationsetups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

   /**
    * Delete an existing ConfigurationSetup
    * Delete a ConfigurationSetup
    */
    async configurationsetupsIdDelete(requestParameters: ConfigurationsetupsIdDeleteRequest): Promise<void> {
        await this.configurationsetupsIdDeleteRaw(requestParameters);
    }

    /**
     * Gets the details of a single instance of a ConfigurationSetup
     * Get a ConfigurationSetup
     */
    async configurationsetupsIdGetRaw(requestParameters: ConfigurationsetupsIdGetRequest): Promise<runtime.ApiResponse<ConfigurationSetup>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling configurationsetupsIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/configurationsetups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfigurationSetupFromJSON(jsonValue));
    }

   /**
    * Gets the details of a single instance of a ConfigurationSetup
    * Get a ConfigurationSetup
    */
    async configurationsetupsIdGet(requestParameters: ConfigurationsetupsIdGetRequest): Promise<ConfigurationSetup> {
        const response = await this.configurationsetupsIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates an existing ConfigurationSetup
     * Update a ConfigurationSetup
     */
    async configurationsetupsIdPutRaw(requestParameters: ConfigurationsetupsIdPutRequest): Promise<runtime.ApiResponse<ConfigurationSetup>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling configurationsetupsIdPut.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling configurationsetupsIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/configurationsetups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConfigurationSetupToJSON(requestParameters.configurationSetup),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfigurationSetupFromJSON(jsonValue));
    }

   /**
    * Updates an existing ConfigurationSetup
    * Update a ConfigurationSetup
    */
    async configurationsetupsIdPut(requestParameters: ConfigurationsetupsIdPutRequest): Promise<ConfigurationSetup> {
        const response = await this.configurationsetupsIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new instance of a ConfigurationSetup
     * Create a ConfigurationSetup
     */
    async configurationsetupsPostRaw(requestParameters: ConfigurationsetupsPostRequest): Promise<runtime.ApiResponse<ConfigurationSetup>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling configurationsetupsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/configurationsetups`.replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfigurationSetupToJSON(requestParameters.configurationSetup),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfigurationSetupFromJSON(jsonValue));
    }

   /**
    * Create a new instance of a ConfigurationSetup
    * Create a ConfigurationSetup
    */
    async configurationsetupsPost(requestParameters: ConfigurationsetupsPostRequest): Promise<ConfigurationSetup> {
        const response = await this.configurationsetupsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets the details of a single instance of a ModelConfigurationSetup
     * Get a ModelConfigurationSetup
     */
    async customConfigurationsetupsIdGetRaw(requestParameters: CustomConfigurationsetupsIdGetRequest): Promise<runtime.ApiResponse<ModelConfigurationSetup>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customConfigurationsetupsIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.customQueryName !== undefined) {
            queryParameters['custom_query_name'] = requestParameters.customQueryName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/custom/configurationsetups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelConfigurationSetupFromJSON(jsonValue));
    }

   /**
    * Gets the details of a single instance of a ModelConfigurationSetup
    * Get a ModelConfigurationSetup
    */
    async customConfigurationsetupsIdGet(requestParameters: CustomConfigurationsetupsIdGetRequest): Promise<ModelConfigurationSetup> {
        const response = await this.customConfigurationsetupsIdGetRaw(requestParameters);
        return await response.value();
    }

}
