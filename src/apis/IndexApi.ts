// tslint:disable
/**
 * Model Catalog
 * This is the API of the  Software Description Ontology at [https://mintproject.github.io/Mint-ModelCatalog-Ontology/release/1.2.0/index-en.html](https://w3id.org/okn/o/sdm)
 *
 * The version of the OpenAPI document: v1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Index,
    IndexFromJSON,
    IndexToJSON,
} from '../models';

export interface IndexsGetRequest {
    username?: string;
    label?: string;
}

export interface IndexsIdDeleteRequest {
    id: string;
    user: string;
}

export interface IndexsIdGetRequest {
    id: string;
    username?: string;
}

export interface IndexsIdPutRequest {
    id: string;
    user: string;
    index?: Index;
}

export interface IndexsPostRequest {
    user: string;
    index?: Index;
}

/**
 * no description
 */
export class IndexApi extends runtime.BaseAPI {

    /**
     * Gets a list of all Index entities
     * List all Index entities
     */
    async indexsGetRaw(requestParameters: IndexsGetRequest): Promise<runtime.ApiResponse<Array<Index>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.label !== undefined) {
            queryParameters['label'] = requestParameters.label;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/indexs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IndexFromJSON));
    }

   /**
    * Gets a list of all Index entities
    * List all Index entities
    */
    async indexsGet(requestParameters: IndexsGetRequest): Promise<Array<Index>> {
        const response = await this.indexsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing Index
     * Delete a Index
     */
    async indexsIdDeleteRaw(requestParameters: IndexsIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling indexsIdDelete.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling indexsIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/indexs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

   /**
    * Delete an existing Index
    * Delete a Index
    */
    async indexsIdDelete(requestParameters: IndexsIdDeleteRequest): Promise<void> {
        await this.indexsIdDeleteRaw(requestParameters);
    }

    /**
     * Gets the details of a single instance of a Index
     * Get a Index
     */
    async indexsIdGetRaw(requestParameters: IndexsIdGetRequest): Promise<runtime.ApiResponse<Index>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling indexsIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/indexs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexFromJSON(jsonValue));
    }

   /**
    * Gets the details of a single instance of a Index
    * Get a Index
    */
    async indexsIdGet(requestParameters: IndexsIdGetRequest): Promise<Index> {
        const response = await this.indexsIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates an existing Index
     * Update a Index
     */
    async indexsIdPutRaw(requestParameters: IndexsIdPutRequest): Promise<runtime.ApiResponse<Index>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling indexsIdPut.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling indexsIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/indexs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IndexToJSON(requestParameters.index),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexFromJSON(jsonValue));
    }

   /**
    * Updates an existing Index
    * Update a Index
    */
    async indexsIdPut(requestParameters: IndexsIdPutRequest): Promise<Index> {
        const response = await this.indexsIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new instance of a Index
     * Create a Index
     */
    async indexsPostRaw(requestParameters: IndexsPostRequest): Promise<runtime.ApiResponse<Index>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling indexsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/indexs`.replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IndexToJSON(requestParameters.index),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexFromJSON(jsonValue));
    }

   /**
    * Create a new instance of a Index
    * Create a Index
    */
    async indexsPost(requestParameters: IndexsPostRequest): Promise<Index> {
        const response = await this.indexsPostRaw(requestParameters);
        return await response.value();
    }

}
