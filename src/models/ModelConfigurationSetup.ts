// tslint:disable
/**
 * Model Catalog
 * This is the API of the Software Description Ontology at [https://w3id.org/okn/o/sdm](https://w3id.org/okn/o/sdm)
 *
 * The version of the OpenAPI document: v1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CausalDiagram,
    CausalDiagramFromJSON,
    CausalDiagramFromJSONTyped,
    CausalDiagramToJSON,
    ConfigurationSetup,
    ConfigurationSetupFromJSON,
    ConfigurationSetupFromJSONTyped,
    ConfigurationSetupToJSON,
    DatasetSpecification,
    DatasetSpecificationFromJSON,
    DatasetSpecificationFromJSONTyped,
    DatasetSpecificationToJSON,
    Equation,
    EquationFromJSON,
    EquationFromJSONTyped,
    EquationToJSON,
    FundingInformation,
    FundingInformationFromJSON,
    FundingInformationFromJSONTyped,
    FundingInformationToJSON,
    Grid,
    GridFromJSON,
    GridFromJSONTyped,
    GridToJSON,
    Image,
    ImageFromJSON,
    ImageFromJSONTyped,
    ImageToJSON,
    NumericalIndex,
    NumericalIndexFromJSON,
    NumericalIndexFromJSONTyped,
    NumericalIndexToJSON,
    Parameter,
    ParameterFromJSON,
    ParameterFromJSONTyped,
    ParameterToJSON,
    Person,
    PersonFromJSON,
    PersonFromJSONTyped,
    PersonToJSON,
    Process,
    ProcessFromJSON,
    ProcessFromJSONTyped,
    ProcessToJSON,
    Region,
    RegionFromJSON,
    RegionFromJSONTyped,
    RegionToJSON,
    SampleExecution,
    SampleExecutionFromJSON,
    SampleExecutionFromJSONTyped,
    SampleExecutionToJSON,
    SampleResource,
    SampleResourceFromJSON,
    SampleResourceFromJSONTyped,
    SampleResourceToJSON,
    Software,
    SoftwareFromJSON,
    SoftwareFromJSONTyped,
    SoftwareToJSON,
    SoftwareImage,
    SoftwareImageFromJSON,
    SoftwareImageFromJSONTyped,
    SoftwareImageToJSON,
    SoftwareVersion,
    SoftwareVersionFromJSON,
    SoftwareVersionFromJSONTyped,
    SoftwareVersionToJSON,
    SourceCode,
    SourceCodeFromJSON,
    SourceCodeFromJSONTyped,
    SourceCodeToJSON,
    TimeInterval,
    TimeIntervalFromJSON,
    TimeIntervalFromJSONTyped,
    TimeIntervalToJSON,
    VariablePresentation,
    VariablePresentationFromJSON,
    VariablePresentationFromJSONTyped,
    VariablePresentationToJSON,
    Visualization,
    VisualizationFromJSON,
    VisualizationFromJSONTyped,
    VisualizationToJSON,
} from './';

/**
 * Setup of a particular model, that may represent a calibration or a configuration with a set of values for a specific region.
 * @export
 * @interface ModelConfigurationSetup
 */
export interface ModelConfigurationSetup {
    /**
     * Keywords associated with a software component
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    keywords?: Array<string> | null;
    /**
     * Pointer to the documentation of the model
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    hasDocumentation?: Array<string> | null;
    /**
     * Grid information about the model
     * @type {Array<Grid>}
     * @memberof ModelConfigurationSetup
     */
    hasGrid?: Array<Grid> | null;
    /**
     * Property that points to the main runnable script for the current function
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    hasImplementationScriptLocation?: Array<string> | null;
    /**
     * Description not available
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    softwareRequirements?: Array<string> | null;
    /**
     * Download URL where to obtain the source/executable of the software
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    hasDownloadURL?: Array<string> | null;
    /**
     * type of the resource
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    type?: Array<string> | null;
    /**
     * Variable that was calibrated in this particular model configuration calibration
     * @type {Array<VariablePresentation>}
     * @memberof ModelConfigurationSetup
     */
    calibratedVariable?: Array<VariablePresentation> | null;
    /**
     * Instructions requires to install this particular piece of software.
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    hasInstallationInstructions?: Array<string> | null;
    /**
     * Property that links a software component to other useful software that canbe used to visualize its outputs
     * @type {Array<Software>}
     * @memberof ModelConfigurationSetup
     */
    compatibleVisualizationSoftware?: Array<Software> | null;
    /**
     * Calibration method used for a particular model configuration or setup
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    calibrationMethod?: Array<string> | null;
    /**
     * Property linking a region to a model configuration/calibration. This property implies that the described model configuration is prepared to execute in that target region
     * @type {Array<Region>}
     * @memberof ModelConfigurationSetup
     */
    hasRegion?: Array<Region> | null;
    /**
     * Frequently asked questions about a software
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    hasFAQ?: Array<string> | null;
    /**
     * Description not available
     * @type {Array<Image>}
     * @memberof ModelConfigurationSetup
     */
    logo?: Array<Image> | null;
    /**
     * Description not available
     * @type {Array<object>}
     * @memberof ModelConfigurationSetup
     */
    hasContactPerson?: Array<object> | null;
    /**
     * Tag used to annotate a version or a software configuration. This annotation is useful to show which version is the latest, or which version is deprecated. Supported tags are: \"latest\", \"deprecated\"
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    tag?: Array<string> | null;
    /**
     * identifier
     * @type {string}
     * @memberof ModelConfigurationSetup
     */
    id?: string;
    /**
     * Identifier of the resource being described
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    identifier?: Array<string> | null;
    /**
     * Description not available
     * @type {Array<SampleExecution>}
     * @memberof ModelConfigurationSetup
     */
    hasSampleExecution?: Array<SampleExecution> | null;
    /**
     * Description not available
     * @type {Array<SampleResource>}
     * @memberof ModelConfigurationSetup
     */
    hasSampleResult?: Array<SampleResource> | null;
    /**
     * Description not available
     * @type {Array<object>}
     * @memberof ModelConfigurationSetup
     */
    author?: Array<object> | null;
    /**
     * Constraint or rule associated to a  variable or software configuration. For example: \"This model accepts only monthly data\", or \"all inputs of this model configuration must share the same location\". More structured restrictions, such as Jena rules or SWRL rules may also be captured with this property
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    hasConstraint?: Array<string> | null;
    /**
     * A summarized description of the resource
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    shortDescription?: Array<string> | null;
    /**
     * Execution instructions on how to run the image
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    hasExecutionCommand?: Array<string> | null;
    /**
     * Description not available
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    datePublished?: Array<string> | null;
    /**
     * License of a software component or its source code
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    license?: Array<string> | null;
    /**
     * Description not available
     * @type {Array<SourceCode>}
     * @memberof ModelConfigurationSetup
     */
    hasSourceCode?: Array<SourceCode> | null;
    /**
     * Property used to define configurations with some fixed resources and values. The rationale of this property is to allow predefined configurations
     * @type {Array<ConfigurationSetup>}
     * @memberof ModelConfigurationSetup
     */
    hasSetup?: Array<ConfigurationSetup> | null;
    /**
     * Diagram used to explain the behavior of the model
     * @type {Array<Image>}
     * @memberof ModelConfigurationSetup
     */
    hasExplanationDiagram?: Array<Image> | null;
    /**
     * An example explaining a scenario where the model was used in plain language.
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    hasExample?: Array<string> | null;
    /**
     * Property that represents the temporal interval used to calibrate a model
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    calibrationInterval?: Array<string> | null;
    /**
     * Description not available
     * @type {Array<object>}
     * @memberof ModelConfigurationSetup
     */
    publisher?: Array<object> | null;
    /**
     * Property that expresses what are the outputs of a model
     * @type {Array<DatasetSpecification>}
     * @memberof ModelConfigurationSetup
     */
    hasOutput?: Array<DatasetSpecification> | null;
    /**
     * Description not available
     * @type {Array<TimeInterval>}
     * @memberof ModelConfigurationSetup
     */
    hasOutputTimeInterval?: Array<TimeInterval> | null;
    /**
     * Description not available
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    parameterAssignmentMethod?: Array<string> | null;
    /**
     * Property that links a software project to its funding information
     * @type {Array<FundingInformation>}
     * @memberof ModelConfigurationSetup
     */
    hasFunding?: Array<FundingInformation> | null;
    /**
     * Location of the aggregation of all the files needed to execute the component. Usually a zip file including the run script and support scripts, including specification files
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    hasComponentLocation?: Array<string> | null;
    /**
     * Description not available
     * @type {Array<Process>}
     * @memberof ModelConfigurationSetup
     */
    hasProcess?: Array<Process> | null;
    /**
     * Property to link details, such as mailing lists in case a contact person is not provided
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    supportDetails?: Array<string> | null;
    /**
     * Description not available
     * @type {Array<SoftwareVersion>}
     * @memberof ModelConfigurationSetup
     */
    hasVersion?: Array<SoftwareVersion> | null;
    /**
     * Description not available
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    hasTypicalDataSource?: Array<string> | null;
    /**
     * small description
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    description?: Array<string> | null;
    /**
     * Main publication to cite in this software
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    referencePublication?: Array<string> | null;
    /**
     * Description not available
     * @type {Array<Image>}
     * @memberof ModelConfigurationSetup
     */
    screenshot?: Array<Image> | null;
    /**
     * Description not available
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    hasModelCategory?: Array<string> | null;
    /**
     * Property to identify the original source of the information of the annotated resource. It could be a web page, an organization, a person, some experiment notes, etc.
     * @type {Array<object>}
     * @memberof ModelConfigurationSetup
     */
    hadPrimarySource?: Array<object> | null;
    /**
     * Function to link a function with its corresponding container
     * @type {Array<SoftwareImage>}
     * @memberof ModelConfigurationSetup
     */
    hasSoftwareImage?: Array<SoftwareImage> | null;
    /**
     * Description not available
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    dateCreated?: Array<string> | null;
    /**
     * Description not available
     * @type {Array<Person>}
     * @memberof ModelConfigurationSetup
     */
    contributor?: Array<Person> | null;
    /**
     * Description not available
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    hasModelResultTable?: Array<string> | null;
    /**
     * Variable for which the model was calibrated for. For example, in a hydrology model one calibrate the predicted river width by varying hydrologic conductivity
     * @type {Array<VariablePresentation>}
     * @memberof ModelConfigurationSetup
     */
    calibrationTargetVariable?: Array<VariablePresentation> | null;
    /**
     * Objective or main functionality that can be achieved by running this software
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    hasPurpose?: Array<string> | null;
    /**
     * A typical sample visualization of the softwware outputs
     * @type {Array<Visualization>}
     * @memberof ModelConfigurationSetup
     */
    hasSampleVisualization?: Array<Visualization> | null;
    /**
     * Diagram associated to a model configuration
     * @type {Array<CausalDiagram>}
     * @memberof ModelConfigurationSetup
     */
    hasCausalDiagram?: Array<CausalDiagram> | null;
    /**
     * Description not available
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    memoryRequirements?: Array<string> | null;
    /**
     * Website of the software
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    website?: Array<string> | null;
    /**
     * How to cite this software
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    citation?: Array<string> | null;
    /**
     * Description not available
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    processorRequirements?: Array<string> | null;
    /**
     * Parameter that can be adjusted in a configuration setup
     * @type {Array<Parameter>}
     * @memberof ModelConfigurationSetup
     */
    adjustableParameter?: Array<Parameter> | null;
    /**
     * Property that describes the usage considerations of a particular software. These notes capture the rationale of for that software configuration, along with an explanation for sample inputs, things to consider when running the model with data, etc.
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    hasUsageNotes?: Array<string> | null;
    /**
     * Property that links to the location of scripts that may be used from the main runnable script.
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    hasSupportScriptLocation?: Array<string> | null;
    /**
     * short description of the resource
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    label?: Array<string> | null;
    /**
     * Assumptions of a software, e.g. the solver being used for a particular model, the source of the data (e.g., all data must have a given resolution), etc.
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    hasAssumption?: Array<string> | null;
    /**
     * Property that indicates the parameters of a model configuration
     * @type {Array<Parameter>}
     * @memberof ModelConfigurationSetup
     */
    hasParameter?: Array<Parameter> | null;
    /**
     * Description not available
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    operatingSystems?: Array<string> | null;
    /**
     * Date until which the calibration of a model is valid. For example, a trained model with data from 2005-2010 may only be valid for predictions until 2015.
     * @type {Array<string>}
     * @memberof ModelConfigurationSetup
     */
    validUntil?: Array<string> | null;
    /**
     * Equations used in the model
     * @type {Array<Equation>}
     * @memberof ModelConfigurationSetup
     */
    hasEquation?: Array<Equation> | null;
    /**
     * Property that links a model configuration to the input types expected by it.
     * @type {Array<DatasetSpecification>}
     * @memberof ModelConfigurationSetup
     */
    hasInput?: Array<DatasetSpecification> | null;
    /**
     * Property that indicates that a software component (or any of its outputs) can be used to calculate a particular index. The rationale for this property is that indices are usually calculated by applying post-processing steps to the outputs of a software component.
     * @type {Array<NumericalIndex>}
     * @memberof ModelConfigurationSetup
     */
    usefulForCalculatingIndex?: Array<NumericalIndex> | null;
}

export function ModelConfigurationSetupFromJSON(json: any): ModelConfigurationSetup {
    return ModelConfigurationSetupFromJSONTyped(json, false);
}

export function ModelConfigurationSetupFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelConfigurationSetup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'keywords': !exists(json, 'keywords') ? undefined : json['keywords'],
        'hasDocumentation': !exists(json, 'hasDocumentation') ? undefined : json['hasDocumentation'],
        'hasGrid': !exists(json, 'hasGrid') ? undefined : (json['hasGrid'] as Array<any>).map(GridFromJSON),
        'hasImplementationScriptLocation': !exists(json, 'hasImplementationScriptLocation') ? undefined : json['hasImplementationScriptLocation'],
        'softwareRequirements': !exists(json, 'softwareRequirements') ? undefined : json['softwareRequirements'],
        'hasDownloadURL': !exists(json, 'hasDownloadURL') ? undefined : json['hasDownloadURL'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'calibratedVariable': !exists(json, 'calibratedVariable') ? undefined : (json['calibratedVariable'] as Array<any>).map(VariablePresentationFromJSON),
        'hasInstallationInstructions': !exists(json, 'hasInstallationInstructions') ? undefined : json['hasInstallationInstructions'],
        'compatibleVisualizationSoftware': !exists(json, 'compatibleVisualizationSoftware') ? undefined : (json['compatibleVisualizationSoftware'] as Array<any>).map(SoftwareFromJSON),
        'calibrationMethod': !exists(json, 'calibrationMethod') ? undefined : json['calibrationMethod'],
        'hasRegion': !exists(json, 'hasRegion') ? undefined : (json['hasRegion'] as Array<any>).map(RegionFromJSON),
        'hasFAQ': !exists(json, 'hasFAQ') ? undefined : json['hasFAQ'],
        'logo': !exists(json, 'logo') ? undefined : (json['logo'] as Array<any>).map(ImageFromJSON),
        'hasContactPerson': !exists(json, 'hasContactPerson') ? undefined : json['hasContactPerson'],
        'tag': !exists(json, 'tag') ? undefined : json['tag'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'identifier': !exists(json, 'identifier') ? undefined : json['identifier'],
        'hasSampleExecution': !exists(json, 'hasSampleExecution') ? undefined : (json['hasSampleExecution'] as Array<any>).map(SampleExecutionFromJSON),
        'hasSampleResult': !exists(json, 'hasSampleResult') ? undefined : (json['hasSampleResult'] as Array<any>).map(SampleResourceFromJSON),
        'author': !exists(json, 'author') ? undefined : json['author'],
        'hasConstraint': !exists(json, 'hasConstraint') ? undefined : json['hasConstraint'],
        'shortDescription': !exists(json, 'shortDescription') ? undefined : json['shortDescription'],
        'hasExecutionCommand': !exists(json, 'hasExecutionCommand') ? undefined : json['hasExecutionCommand'],
        'datePublished': !exists(json, 'datePublished') ? undefined : json['datePublished'],
        'license': !exists(json, 'license') ? undefined : json['license'],
        'hasSourceCode': !exists(json, 'hasSourceCode') ? undefined : (json['hasSourceCode'] as Array<any>).map(SourceCodeFromJSON),
        'hasSetup': !exists(json, 'hasSetup') ? undefined : (json['hasSetup'] as Array<any>).map(ConfigurationSetupFromJSON),
        'hasExplanationDiagram': !exists(json, 'hasExplanationDiagram') ? undefined : (json['hasExplanationDiagram'] as Array<any>).map(ImageFromJSON),
        'hasExample': !exists(json, 'hasExample') ? undefined : json['hasExample'],
        'calibrationInterval': !exists(json, 'calibrationInterval') ? undefined : json['calibrationInterval'],
        'publisher': !exists(json, 'publisher') ? undefined : json['publisher'],
        'hasOutput': !exists(json, 'hasOutput') ? undefined : (json['hasOutput'] as Array<any>).map(DatasetSpecificationFromJSON),
        'hasOutputTimeInterval': !exists(json, 'hasOutputTimeInterval') ? undefined : (json['hasOutputTimeInterval'] as Array<any>).map(TimeIntervalFromJSON),
        'parameterAssignmentMethod': !exists(json, 'parameterAssignmentMethod') ? undefined : json['parameterAssignmentMethod'],
        'hasFunding': !exists(json, 'hasFunding') ? undefined : (json['hasFunding'] as Array<any>).map(FundingInformationFromJSON),
        'hasComponentLocation': !exists(json, 'hasComponentLocation') ? undefined : json['hasComponentLocation'],
        'hasProcess': !exists(json, 'hasProcess') ? undefined : (json['hasProcess'] as Array<any>).map(ProcessFromJSON),
        'supportDetails': !exists(json, 'supportDetails') ? undefined : json['supportDetails'],
        'hasVersion': !exists(json, 'hasVersion') ? undefined : (json['hasVersion'] as Array<any>).map(SoftwareVersionFromJSON),
        'hasTypicalDataSource': !exists(json, 'hasTypicalDataSource') ? undefined : json['hasTypicalDataSource'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'referencePublication': !exists(json, 'referencePublication') ? undefined : json['referencePublication'],
        'screenshot': !exists(json, 'screenshot') ? undefined : (json['screenshot'] as Array<any>).map(ImageFromJSON),
        'hasModelCategory': !exists(json, 'hasModelCategory') ? undefined : json['hasModelCategory'],
        'hadPrimarySource': !exists(json, 'hadPrimarySource') ? undefined : json['hadPrimarySource'],
        'hasSoftwareImage': !exists(json, 'hasSoftwareImage') ? undefined : (json['hasSoftwareImage'] as Array<any>).map(SoftwareImageFromJSON),
        'dateCreated': !exists(json, 'dateCreated') ? undefined : json['dateCreated'],
        'contributor': !exists(json, 'contributor') ? undefined : (json['contributor'] as Array<any>).map(PersonFromJSON),
        'hasModelResultTable': !exists(json, 'hasModelResultTable') ? undefined : json['hasModelResultTable'],
        'calibrationTargetVariable': !exists(json, 'calibrationTargetVariable') ? undefined : (json['calibrationTargetVariable'] as Array<any>).map(VariablePresentationFromJSON),
        'hasPurpose': !exists(json, 'hasPurpose') ? undefined : json['hasPurpose'],
        'hasSampleVisualization': !exists(json, 'hasSampleVisualization') ? undefined : (json['hasSampleVisualization'] as Array<any>).map(VisualizationFromJSON),
        'hasCausalDiagram': !exists(json, 'hasCausalDiagram') ? undefined : (json['hasCausalDiagram'] as Array<any>).map(CausalDiagramFromJSON),
        'memoryRequirements': !exists(json, 'memoryRequirements') ? undefined : json['memoryRequirements'],
        'website': !exists(json, 'website') ? undefined : json['website'],
        'citation': !exists(json, 'citation') ? undefined : json['citation'],
        'processorRequirements': !exists(json, 'processorRequirements') ? undefined : json['processorRequirements'],
        'adjustableParameter': !exists(json, 'adjustableParameter') ? undefined : (json['adjustableParameter'] as Array<any>).map(ParameterFromJSON),
        'hasUsageNotes': !exists(json, 'hasUsageNotes') ? undefined : json['hasUsageNotes'],
        'hasSupportScriptLocation': !exists(json, 'hasSupportScriptLocation') ? undefined : json['hasSupportScriptLocation'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'hasAssumption': !exists(json, 'hasAssumption') ? undefined : json['hasAssumption'],
        'hasParameter': !exists(json, 'hasParameter') ? undefined : (json['hasParameter'] as Array<any>).map(ParameterFromJSON),
        'operatingSystems': !exists(json, 'operatingSystems') ? undefined : json['operatingSystems'],
        'validUntil': !exists(json, 'validUntil') ? undefined : json['validUntil'],
        'hasEquation': !exists(json, 'hasEquation') ? undefined : (json['hasEquation'] as Array<any>).map(EquationFromJSON),
        'hasInput': !exists(json, 'hasInput') ? undefined : (json['hasInput'] as Array<any>).map(DatasetSpecificationFromJSON),
        'usefulForCalculatingIndex': !exists(json, 'usefulForCalculatingIndex') ? undefined : (json['usefulForCalculatingIndex'] as Array<any>).map(NumericalIndexFromJSON),
    };
}

export function ModelConfigurationSetupToJSON(value?: ModelConfigurationSetup): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'keywords': value.keywords,
        'hasDocumentation': value.hasDocumentation,
        'hasGrid': value.hasGrid === undefined ? undefined : (value.hasGrid as Array<any>).map(GridToJSON),
        'hasImplementationScriptLocation': value.hasImplementationScriptLocation,
        'softwareRequirements': value.softwareRequirements,
        'hasDownloadURL': value.hasDownloadURL,
        'type': value.type,
        'calibratedVariable': value.calibratedVariable === undefined ? undefined : (value.calibratedVariable as Array<any>).map(VariablePresentationToJSON),
        'hasInstallationInstructions': value.hasInstallationInstructions,
        'compatibleVisualizationSoftware': value.compatibleVisualizationSoftware === undefined ? undefined : (value.compatibleVisualizationSoftware as Array<any>).map(SoftwareToJSON),
        'calibrationMethod': value.calibrationMethod,
        'hasRegion': value.hasRegion === undefined ? undefined : (value.hasRegion as Array<any>).map(RegionToJSON),
        'hasFAQ': value.hasFAQ,
        'logo': value.logo === undefined ? undefined : (value.logo as Array<any>).map(ImageToJSON),
        'hasContactPerson': value.hasContactPerson,
        'tag': value.tag,
        'id': value.id,
        'identifier': value.identifier,
        'hasSampleExecution': value.hasSampleExecution === undefined ? undefined : (value.hasSampleExecution as Array<any>).map(SampleExecutionToJSON),
        'hasSampleResult': value.hasSampleResult === undefined ? undefined : (value.hasSampleResult as Array<any>).map(SampleResourceToJSON),
        'author': value.author,
        'hasConstraint': value.hasConstraint,
        'shortDescription': value.shortDescription,
        'hasExecutionCommand': value.hasExecutionCommand,
        'datePublished': value.datePublished,
        'license': value.license,
        'hasSourceCode': value.hasSourceCode === undefined ? undefined : (value.hasSourceCode as Array<any>).map(SourceCodeToJSON),
        'hasSetup': value.hasSetup === undefined ? undefined : (value.hasSetup as Array<any>).map(ConfigurationSetupToJSON),
        'hasExplanationDiagram': value.hasExplanationDiagram === undefined ? undefined : (value.hasExplanationDiagram as Array<any>).map(ImageToJSON),
        'hasExample': value.hasExample,
        'calibrationInterval': value.calibrationInterval,
        'publisher': value.publisher,
        'hasOutput': value.hasOutput === undefined ? undefined : (value.hasOutput as Array<any>).map(DatasetSpecificationToJSON),
        'hasOutputTimeInterval': value.hasOutputTimeInterval === undefined ? undefined : (value.hasOutputTimeInterval as Array<any>).map(TimeIntervalToJSON),
        'parameterAssignmentMethod': value.parameterAssignmentMethod,
        'hasFunding': value.hasFunding === undefined ? undefined : (value.hasFunding as Array<any>).map(FundingInformationToJSON),
        'hasComponentLocation': value.hasComponentLocation,
        'hasProcess': value.hasProcess === undefined ? undefined : (value.hasProcess as Array<any>).map(ProcessToJSON),
        'supportDetails': value.supportDetails,
        'hasVersion': value.hasVersion === undefined ? undefined : (value.hasVersion as Array<any>).map(SoftwareVersionToJSON),
        'hasTypicalDataSource': value.hasTypicalDataSource,
        'description': value.description,
        'referencePublication': value.referencePublication,
        'screenshot': value.screenshot === undefined ? undefined : (value.screenshot as Array<any>).map(ImageToJSON),
        'hasModelCategory': value.hasModelCategory,
        'hadPrimarySource': value.hadPrimarySource,
        'hasSoftwareImage': value.hasSoftwareImage === undefined ? undefined : (value.hasSoftwareImage as Array<any>).map(SoftwareImageToJSON),
        'dateCreated': value.dateCreated,
        'contributor': value.contributor === undefined ? undefined : (value.contributor as Array<any>).map(PersonToJSON),
        'hasModelResultTable': value.hasModelResultTable,
        'calibrationTargetVariable': value.calibrationTargetVariable === undefined ? undefined : (value.calibrationTargetVariable as Array<any>).map(VariablePresentationToJSON),
        'hasPurpose': value.hasPurpose,
        'hasSampleVisualization': value.hasSampleVisualization === undefined ? undefined : (value.hasSampleVisualization as Array<any>).map(VisualizationToJSON),
        'hasCausalDiagram': value.hasCausalDiagram === undefined ? undefined : (value.hasCausalDiagram as Array<any>).map(CausalDiagramToJSON),
        'memoryRequirements': value.memoryRequirements,
        'website': value.website,
        'citation': value.citation,
        'processorRequirements': value.processorRequirements,
        'adjustableParameter': value.adjustableParameter === undefined ? undefined : (value.adjustableParameter as Array<any>).map(ParameterToJSON),
        'hasUsageNotes': value.hasUsageNotes,
        'hasSupportScriptLocation': value.hasSupportScriptLocation,
        'label': value.label,
        'hasAssumption': value.hasAssumption,
        'hasParameter': value.hasParameter === undefined ? undefined : (value.hasParameter as Array<any>).map(ParameterToJSON),
        'operatingSystems': value.operatingSystems,
        'validUntil': value.validUntil,
        'hasEquation': value.hasEquation === undefined ? undefined : (value.hasEquation as Array<any>).map(EquationToJSON),
        'hasInput': value.hasInput === undefined ? undefined : (value.hasInput as Array<any>).map(DatasetSpecificationToJSON),
        'usefulForCalculatingIndex': value.usefulForCalculatingIndex === undefined ? undefined : (value.usefulForCalculatingIndex as Array<any>).map(NumericalIndexToJSON),
    };
}


