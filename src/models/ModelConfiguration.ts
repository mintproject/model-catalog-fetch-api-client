// tslint:disable
/**
 * Model Catalog
 * This is MINT Model Catalog You can find out more about Model Catalog at [https://w3id.org/mint/modelCatalog/](https://w3id.org/mint/modelCatalog/)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CausalDiagram,
    CausalDiagramFromJSON,
    CausalDiagramFromJSONTyped,
    CausalDiagramToJSON,
    Equation,
    EquationFromJSON,
    EquationFromJSONTyped,
    EquationToJSON,
    Grid,
    GridFromJSON,
    GridFromJSONTyped,
    GridToJSON,
    Process,
    ProcessFromJSON,
    ProcessFromJSONTyped,
    ProcessToJSON,
    Region,
    RegionFromJSON,
    RegionFromJSONTyped,
    RegionToJSON,
    TimeInterval,
    TimeIntervalFromJSON,
    TimeIntervalFromJSONTyped,
    TimeIntervalToJSON,
} from './';

/**
 * 
 * @export
 * @interface ModelConfiguration
 */
export interface ModelConfiguration {
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelConfiguration
     */
    parameterAssignmentMethod?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelConfiguration
     */
    hasComponentLocation?: Array<string> | null;
    /**
     * 
     * @type {Array<Grid>}
     * @memberof ModelConfiguration
     */
    hasGrid?: Array<Grid> | null;
    /**
     * 
     * @type {Array<Process>}
     * @memberof ModelConfiguration
     */
    hasProcess?: Array<Process> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelConfiguration
     */
    hasImplementationScriptLocation?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelConfiguration
     */
    type?: Array<string> | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof ModelConfiguration
     */
    calibratedVariable?: Array<object> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelConfiguration
     */
    hasModelCategory?: Array<string> | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof ModelConfiguration
     */
    hasSoftwareImage?: Array<object> | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof ModelConfiguration
     */
    compatibleVisualizationSoftware?: Array<object> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelConfiguration
     */
    calibrationMethod?: Array<string> | null;
    /**
     * 
     * @type {Array<Region>}
     * @memberof ModelConfiguration
     */
    hasRegion?: Array<Region> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelConfiguration
     */
    hasModelResultTable?: Array<string> | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof ModelConfiguration
     */
    calibrationTargetVariable?: Array<object> | null;
    /**
     * 
     * @type {string}
     * @memberof ModelConfiguration
     */
    id?: string;
    /**
     * 
     * @type {Array<ModelConfiguration>}
     * @memberof ModelConfiguration
     */
    hasExpertTunedModel?: Array<ModelConfiguration> | null;
    /**
     * 
     * @type {Array<ModelConfiguration>}
     * @memberof ModelConfiguration
     */
    hasCalibration?: Array<ModelConfiguration> | null;
    /**
     * 
     * @type {Array<CausalDiagram>}
     * @memberof ModelConfiguration
     */
    hasCausalDiagram?: Array<CausalDiagram> | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof ModelConfiguration
     */
    hasSampleExecution?: Array<object> | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof ModelConfiguration
     */
    hasSampleResult?: Array<object> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelConfiguration
     */
    hasConstraint?: Array<string> | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof ModelConfiguration
     */
    adjustableParameter?: Array<object> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelConfiguration
     */
    hasSupportScriptLocation?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ModelConfiguration
     */
    label?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelConfiguration
     */
    hasExecutionCommand?: Array<string> | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof ModelConfiguration
     */
    hasParameter?: Array<object> | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof ModelConfiguration
     */
    hasExplanationDiagram?: Array<object> | null;
    /**
     * 
     * @type {Array<Equation>}
     * @memberof ModelConfiguration
     */
    hasEquation?: Array<Equation> | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof ModelConfiguration
     */
    hasOutput?: Array<object> | null;
    /**
     * 
     * @type {Array<TimeInterval>}
     * @memberof ModelConfiguration
     */
    hasOutputTimeInterval?: Array<TimeInterval> | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof ModelConfiguration
     */
    hasInput?: Array<object> | null;
}

export function ModelConfigurationFromJSON(json: any): ModelConfiguration {
    return ModelConfigurationFromJSONTyped(json, false);
}

export function ModelConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelConfiguration {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'parameterAssignmentMethod': !exists(json, 'parameterAssignmentMethod') ? undefined : json['parameterAssignmentMethod'],
        'hasComponentLocation': !exists(json, 'hasComponentLocation') ? undefined : json['hasComponentLocation'],
        'hasGrid': !exists(json, 'hasGrid') ? undefined : (json['hasGrid'] as Array<any>).map(GridFromJSON),
        'hasProcess': !exists(json, 'hasProcess') ? undefined : (json['hasProcess'] as Array<any>).map(ProcessFromJSON),
        'hasImplementationScriptLocation': !exists(json, 'hasImplementationScriptLocation') ? undefined : json['hasImplementationScriptLocation'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'calibratedVariable': !exists(json, 'calibratedVariable') ? undefined : json['calibratedVariable'],
        'hasModelCategory': !exists(json, 'hasModelCategory') ? undefined : json['hasModelCategory'],
        'hasSoftwareImage': !exists(json, 'hasSoftwareImage') ? undefined : json['hasSoftwareImage'],
        'compatibleVisualizationSoftware': !exists(json, 'compatibleVisualizationSoftware') ? undefined : json['compatibleVisualizationSoftware'],
        'calibrationMethod': !exists(json, 'calibrationMethod') ? undefined : json['calibrationMethod'],
        'hasRegion': !exists(json, 'hasRegion') ? undefined : (json['hasRegion'] as Array<any>).map(RegionFromJSON),
        'hasModelResultTable': !exists(json, 'hasModelResultTable') ? undefined : json['hasModelResultTable'],
        'calibrationTargetVariable': !exists(json, 'calibrationTargetVariable') ? undefined : json['calibrationTargetVariable'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'hasExpertTunedModel': !exists(json, 'hasExpertTunedModel') ? undefined : (json['hasExpertTunedModel'] as Array<any>).map(ModelConfigurationFromJSON),
        'hasCalibration': !exists(json, 'hasCalibration') ? undefined : (json['hasCalibration'] as Array<any>).map(ModelConfigurationFromJSON),
        'hasCausalDiagram': !exists(json, 'hasCausalDiagram') ? undefined : (json['hasCausalDiagram'] as Array<any>).map(CausalDiagramFromJSON),
        'hasSampleExecution': !exists(json, 'hasSampleExecution') ? undefined : json['hasSampleExecution'],
        'hasSampleResult': !exists(json, 'hasSampleResult') ? undefined : json['hasSampleResult'],
        'hasConstraint': !exists(json, 'hasConstraint') ? undefined : json['hasConstraint'],
        'adjustableParameter': !exists(json, 'adjustableParameter') ? undefined : json['adjustableParameter'],
        'hasSupportScriptLocation': !exists(json, 'hasSupportScriptLocation') ? undefined : json['hasSupportScriptLocation'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'hasExecutionCommand': !exists(json, 'hasExecutionCommand') ? undefined : json['hasExecutionCommand'],
        'hasParameter': !exists(json, 'hasParameter') ? undefined : json['hasParameter'],
        'hasExplanationDiagram': !exists(json, 'hasExplanationDiagram') ? undefined : json['hasExplanationDiagram'],
        'hasEquation': !exists(json, 'hasEquation') ? undefined : (json['hasEquation'] as Array<any>).map(EquationFromJSON),
        'hasOutput': !exists(json, 'hasOutput') ? undefined : json['hasOutput'],
        'hasOutputTimeInterval': !exists(json, 'hasOutputTimeInterval') ? undefined : (json['hasOutputTimeInterval'] as Array<any>).map(TimeIntervalFromJSON),
        'hasInput': !exists(json, 'hasInput') ? undefined : json['hasInput'],
    };
}

export function ModelConfigurationToJSON(value?: ModelConfiguration): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'parameterAssignmentMethod': value.parameterAssignmentMethod,
        'hasComponentLocation': value.hasComponentLocation,
        'hasGrid': value.hasGrid === undefined ? undefined : (value.hasGrid as Array<any>).map(GridToJSON),
        'hasProcess': value.hasProcess === undefined ? undefined : (value.hasProcess as Array<any>).map(ProcessToJSON),
        'hasImplementationScriptLocation': value.hasImplementationScriptLocation,
        'type': value.type,
        'calibratedVariable': value.calibratedVariable,
        'hasModelCategory': value.hasModelCategory,
        'hasSoftwareImage': value.hasSoftwareImage,
        'compatibleVisualizationSoftware': value.compatibleVisualizationSoftware,
        'calibrationMethod': value.calibrationMethod,
        'hasRegion': value.hasRegion === undefined ? undefined : (value.hasRegion as Array<any>).map(RegionToJSON),
        'hasModelResultTable': value.hasModelResultTable,
        'calibrationTargetVariable': value.calibrationTargetVariable,
        'id': value.id,
        'hasExpertTunedModel': value.hasExpertTunedModel === undefined ? undefined : (value.hasExpertTunedModel as Array<any>).map(ModelConfigurationToJSON),
        'hasCalibration': value.hasCalibration === undefined ? undefined : (value.hasCalibration as Array<any>).map(ModelConfigurationToJSON),
        'hasCausalDiagram': value.hasCausalDiagram === undefined ? undefined : (value.hasCausalDiagram as Array<any>).map(CausalDiagramToJSON),
        'hasSampleExecution': value.hasSampleExecution,
        'hasSampleResult': value.hasSampleResult,
        'hasConstraint': value.hasConstraint,
        'adjustableParameter': value.adjustableParameter,
        'hasSupportScriptLocation': value.hasSupportScriptLocation,
        'label': value.label,
        'hasExecutionCommand': value.hasExecutionCommand,
        'hasParameter': value.hasParameter,
        'hasExplanationDiagram': value.hasExplanationDiagram,
        'hasEquation': value.hasEquation === undefined ? undefined : (value.hasEquation as Array<any>).map(EquationToJSON),
        'hasOutput': value.hasOutput,
        'hasOutputTimeInterval': value.hasOutputTimeInterval === undefined ? undefined : (value.hasOutputTimeInterval as Array<any>).map(TimeIntervalToJSON),
        'hasInput': value.hasInput,
    };
}


