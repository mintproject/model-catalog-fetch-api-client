// tslint:disable
/**
 * Model Catalog
 * This is MINT Model Catalog You can find out more about Model Catalog at [https://w3id.org/mint/modelCatalog/](https://w3id.org/mint/modelCatalog/)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DatasetSpecification,
    DatasetSpecificationFromJSON,
    DatasetSpecificationFromJSONTyped,
    DatasetSpecificationToJSON,
    StandardVariable,
    StandardVariableFromJSON,
    StandardVariableFromJSONTyped,
    StandardVariableToJSON,
} from './';

/**
 * 
 * @export
 * @interface VariablePresentation
 */
export interface VariablePresentation {
    /**
     * 
     * @type {Array<object>}
     * @memberof VariablePresentation
     */
    hasDefaultValue?: Array<object> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof VariablePresentation
     */
    hasShortName?: Array<string> | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof VariablePresentation
     */
    hasMinimumAcceptedValue?: Array<object> | null;
    /**
     * 
     * @type {Array<StandardVariable>}
     * @memberof VariablePresentation
     */
    hasStandardVariable?: Array<StandardVariable> | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof VariablePresentation
     */
    hasMaximumAcceptedValue?: Array<object> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof VariablePresentation
     */
    hasConstraint?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof VariablePresentation
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof VariablePresentation
     */
    label?: Array<string> | null;
    /**
     * 
     * @type {Array<DatasetSpecification>}
     * @memberof VariablePresentation
     */
    partOfDataset?: Array<DatasetSpecification> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof VariablePresentation
     */
    type?: Array<string> | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof VariablePresentation
     */
    usesUnit?: Array<object> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof VariablePresentation
     */
    hasLongName?: Array<string> | null;
}

export function VariablePresentationFromJSON(json: any): VariablePresentation {
    return VariablePresentationFromJSONTyped(json, false);
}

export function VariablePresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): VariablePresentation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hasDefaultValue': !exists(json, 'hasDefaultValue') ? undefined : json['hasDefaultValue'],
        'hasShortName': !exists(json, 'hasShortName') ? undefined : json['hasShortName'],
        'hasMinimumAcceptedValue': !exists(json, 'hasMinimumAcceptedValue') ? undefined : json['hasMinimumAcceptedValue'],
        'hasStandardVariable': !exists(json, 'hasStandardVariable') ? undefined : (json['hasStandardVariable'] as Array<any>).map(StandardVariableFromJSON),
        'hasMaximumAcceptedValue': !exists(json, 'hasMaximumAcceptedValue') ? undefined : json['hasMaximumAcceptedValue'],
        'hasConstraint': !exists(json, 'hasConstraint') ? undefined : json['hasConstraint'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'partOfDataset': !exists(json, 'partOfDataset') ? undefined : (json['partOfDataset'] as Array<any>).map(DatasetSpecificationFromJSON),
        'type': !exists(json, 'type') ? undefined : json['type'],
        'usesUnit': !exists(json, 'usesUnit') ? undefined : json['usesUnit'],
        'hasLongName': !exists(json, 'hasLongName') ? undefined : json['hasLongName'],
    };
}

export function VariablePresentationToJSON(value?: VariablePresentation): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hasDefaultValue': value.hasDefaultValue,
        'hasShortName': value.hasShortName,
        'hasMinimumAcceptedValue': value.hasMinimumAcceptedValue,
        'hasStandardVariable': value.hasStandardVariable === undefined ? undefined : (value.hasStandardVariable as Array<any>).map(StandardVariableToJSON),
        'hasMaximumAcceptedValue': value.hasMaximumAcceptedValue,
        'hasConstraint': value.hasConstraint,
        'id': value.id,
        'label': value.label,
        'partOfDataset': value.partOfDataset === undefined ? undefined : (value.partOfDataset as Array<any>).map(DatasetSpecificationToJSON),
        'type': value.type,
        'usesUnit': value.usesUnit,
        'hasLongName': value.hasLongName,
    };
}


