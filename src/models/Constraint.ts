// tslint:disable
/**
 * Model Catalog
 * This is the API of the Software Description Ontology at [https://w3id.org/okn/o/sdm](https://w3id.org/okn/o/sdm)
 *
 * The version of the OpenAPI document: v1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    VariablePresentation,
    VariablePresentationFromJSON,
    VariablePresentationFromJSONTyped,
    VariablePresentationToJSON,
} from './';

/**
 * Data constraints of a configuration
 * @export
 * @interface Constraint
 */
export interface Constraint {
    /**
     * small description
     * @type {Array<string>}
     * @memberof Constraint
     */
    description?: Array<string> | null;
    /**
     * identifier
     * @type {string}
     * @memberof Constraint
     */
    id?: string;
    /**
     * short description of the resource
     * @type {Array<string>}
     * @memberof Constraint
     */
    label?: Array<string> | null;
    /**
     * type of the resource
     * @type {Array<string>}
     * @memberof Constraint
     */
    type?: Array<string> | null;
    /**
     * Rule that defines this constraint
     * @type {Array<string>}
     * @memberof Constraint
     */
    hasRule?: Array<string> | null;
    /**
     * Property that links a rule and the variable that will test it
     * @type {Array<VariablePresentation>}
     * @memberof Constraint
     */
    hasVariable?: Array<VariablePresentation> | null;
}

export function ConstraintFromJSON(json: any): Constraint {
    return ConstraintFromJSONTyped(json, false);
}

export function ConstraintFromJSONTyped(json: any, ignoreDiscriminator: boolean): Constraint {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'hasRule': !exists(json, 'hasRule') ? undefined : json['hasRule'],
        'hasVariable': !exists(json, 'hasVariable') ? undefined : (json['hasVariable'] as Array<any>).map(VariablePresentationFromJSON),
    };
}

export function ConstraintToJSON(value?: Constraint): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'id': value.id,
        'label': value.label,
        'type': value.type,
        'hasRule': value.hasRule,
        'hasVariable': value.hasVariable === undefined ? undefined : (value.hasVariable as Array<any>).map(VariablePresentationToJSON),
    };
}


