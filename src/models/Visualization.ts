// tslint:disable
/**
 * Model Catalog
 * This is the API of the Software Description Ontology at [https://w3id.org/okn/o/sdm](https://w3id.org/okn/o/sdm)
 *
 * The version of the OpenAPI document: v1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Software,
    SoftwareFromJSON,
    SoftwareFromJSONTyped,
    SoftwareToJSON,
    URI | boolean | DateTime | float | integer | string,
    URI | boolean | DateTime | float | integer | stringFromJSON,
    URI | boolean | DateTime | float | integer | stringFromJSONTyped,
    URI | boolean | DateTime | float | integer | stringToJSON,
} from './';

/**
 * Class to represent any type of visualization related to a software. For example, a dynamic HTML page, a video, etc.
 * @export
 * @interface Visualization
 */
export interface Visualization {
    /**
     * Format followed by a file. For example, txt, nc, etc.
     * @type {Array<string>}
     * @memberof Visualization
     */
    hasFormat?: Array<string> | null;
    /**
     * Property to identify the original source of the information of the annotated resource. It could be a web page, an organization, a person, some experiment notes, etc.
     * @type {Array<object>}
     * @memberof Visualization
     */
    hadPrimarySource?: Array<object> | null;
    /**
     * Property that identifies the software used to create a visualization
     * @type {Array<Software>}
     * @memberof Visualization
     */
    wasDerivedFromSoftware?: Array<Software> | null;
    /**
     * small description
     * @type {Array<string>}
     * @memberof Visualization
     */
    description?: Array<string> | null;
    /**
     * identifier
     * @type {string}
     * @memberof Visualization
     */
    id?: string;
    /**
     * short description of the resource
     * @type {Array<string>}
     * @memberof Visualization
     */
    label?: Array<string> | null;
    /**
     * type of the resource
     * @type {Array<string>}
     * @memberof Visualization
     */
    type?: Array<string> | null;
    /**
     * Value associated to the described entity
     * @type {Array<URI | boolean | DateTime | float | integer | string>}
     * @memberof Visualization
     */
    value?: Array<URI | boolean | DateTime | float | integer | string> | null;
}

export function VisualizationFromJSON(json: any): Visualization {
    return VisualizationFromJSONTyped(json, false);
}

export function VisualizationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Visualization {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hasFormat': !exists(json, 'hasFormat') ? undefined : json['hasFormat'],
        'hadPrimarySource': !exists(json, 'hadPrimarySource') ? undefined : json['hadPrimarySource'],
        'wasDerivedFromSoftware': !exists(json, 'wasDerivedFromSoftware') ? undefined : (json['wasDerivedFromSoftware'] as Array<any>).map(SoftwareFromJSON),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'value': !exists(json, 'value') ? undefined : (json['value'] as Array<any>).map(URI | boolean | DateTime | float | integer | stringFromJSON),
    };
}

export function VisualizationToJSON(value?: Visualization): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hasFormat': value.hasFormat,
        'hadPrimarySource': value.hadPrimarySource,
        'wasDerivedFromSoftware': value.wasDerivedFromSoftware === undefined ? undefined : (value.wasDerivedFromSoftware as Array<any>).map(SoftwareToJSON),
        'description': value.description,
        'id': value.id,
        'label': value.label,
        'type': value.type,
        'value': value.value === undefined ? undefined : (value.value as Array<any>).map(URI | boolean | DateTime | float | integer | stringToJSON),
    };
}


